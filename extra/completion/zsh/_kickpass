#compdef kickpass

(( $+functions[_kp_safes] )) ||
_kp_safes()
{
	local files expl

	files=(${(f)"$(_call_program files kickpass ls 2>/dev/null)"})
	_wanted safe expl "safe" _multi_parts / files
}

(( $+functions[_kp-open] )) ||
_kp-open()
{
	_arguments \
		':Safe to open:->safe' && return

	case $state in
		(safe)
			_alternative 'safe::_kp_safes'
			;;
	esac

	return
}

(( $+functions[_kp_commands] )) ||
_kp_commands()
{
	local -a kp_commands
	kp_commands=(
		init:'Initialize a new password safe directory' \
		{create,new,insert}:'Create a new password safe' \
		{open,show,cat}:'Open a password safe and print its content on stdout' \
		edit:'Edit a password safe with $EDIT' \
		copy:'Copy a password (first line of safe) into X clipboard' \
		{list,ls}:'List available safes' \
		{delete,rm,remove,destroy}:'Delete a password safe' \
		{rename,mv,move}:'Rename a password safe'
	)

	_tags kp-commands
	_describe -t kp-commands 'main kickpass commands' kp_commands

	return
}

_kickpass()
{
	local curcontext=$curcontext state line

	_arguments -C : \
		{-v,--version}'[Print kickpass version]' \
		{-h,--help}'[Print help]'\
		'(-): :->command' \
		'(-)*:: :->option-or-argument' \
		&& return

	case $state in
		(command)
			_kp_commands
			;;
		(option-or-argument)
			curcontext=${curcontext%:*:*}:kp-$words[1]:
			if ! _call_function ret _kp-$words[1]; then
				_message "unknown sub-command: $words[1]"
			fi
			;;
	esac

	return
}

_kickpass
